// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  watchlist     Watchlist[]
  ratings       Rating[]
  preferences   UserPreference[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movie {
  id               String     @id
  title            String
  overview         String?    @db.Text
  posterPath       String?
  backdropPath     String?
  releaseDate      DateTime?
  voteAverage      Float?
  voteCount        Int?
  popularity       Float?
  genres           Genre[]
  tmdbId           Int       @unique
  mediaType        MediaType  @default(MOVIE)
  
  // Relations
  watchlist        Watchlist[]
  ratings          Rating[]
}

model TVShow {
  id               String     @id
  title            String
  overview         String?    @db.Text
  posterPath       String?
  backdropPath     String?
  firstAirDate     DateTime?
  voteAverage      Float?
  voteCount        Int?
  popularity       Float?
  genres           Genre[]
  tmdbId           Int       @unique
  mediaType        MediaType  @default(TV)
  
  // Relations
  watchlist        Watchlist[]
  ratings          Rating[]
}

model Genre {
  id        Int      @id
  name      String
  movies    Movie[]
  tvShows   TVShow[]
}

model Watchlist {
  id        String    @id @default(cuid())
  userId    String
  movieId   String?
  tvShowId  String?
  addedAt   DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie?    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  tvShow    TVShow?   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId, tvShowId])
}

model Rating {
  id        String    @id @default(cuid())
  userId    String
  movieId   String?
  tvShowId  String?
  rating    Int       @db.SmallInt
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie?    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  tvShow    TVShow?   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId, tvShowId])
}

model UserPreference {
  id        String    @id @default(cuid())
  userId    String
  genreId   Int
  weight    Float     @default(1.0)
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, genreId])
}

enum MediaType {
  MOVIE
  TV
}
